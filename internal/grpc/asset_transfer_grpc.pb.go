// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: asset_transfer.proto

package sig_graph_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransferAssetClient is the client API for TransferAsset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferAssetClient interface {
	RequestToAcceptAsset(ctx context.Context, in *RequestToAcceptAssetRequest, opts ...grpc.CallOption) (*RequestToAcceptAssetResponse, error)
	AcceptAsset(ctx context.Context, in *AcceptAssetRequest, opts ...grpc.CallOption) (*AcceptAssetResponse, error)
}

type transferAssetClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferAssetClient(cc grpc.ClientConnInterface) TransferAssetClient {
	return &transferAssetClient{cc}
}

func (c *transferAssetClient) RequestToAcceptAsset(ctx context.Context, in *RequestToAcceptAssetRequest, opts ...grpc.CallOption) (*RequestToAcceptAssetResponse, error) {
	out := new(RequestToAcceptAssetResponse)
	err := c.cc.Invoke(ctx, "/sig_graph_grpc.TransferAsset/RequestToAcceptAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferAssetClient) AcceptAsset(ctx context.Context, in *AcceptAssetRequest, opts ...grpc.CallOption) (*AcceptAssetResponse, error) {
	out := new(AcceptAssetResponse)
	err := c.cc.Invoke(ctx, "/sig_graph_grpc.TransferAsset/AcceptAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferAssetServer is the server API for TransferAsset service.
// All implementations must embed UnimplementedTransferAssetServer
// for forward compatibility
type TransferAssetServer interface {
	RequestToAcceptAsset(context.Context, *RequestToAcceptAssetRequest) (*RequestToAcceptAssetResponse, error)
	AcceptAsset(context.Context, *AcceptAssetRequest) (*AcceptAssetResponse, error)
	mustEmbedUnimplementedTransferAssetServer()
}

// UnimplementedTransferAssetServer must be embedded to have forward compatible implementations.
type UnimplementedTransferAssetServer struct {
}

func (UnimplementedTransferAssetServer) RequestToAcceptAsset(context.Context, *RequestToAcceptAssetRequest) (*RequestToAcceptAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToAcceptAsset not implemented")
}
func (UnimplementedTransferAssetServer) AcceptAsset(context.Context, *AcceptAssetRequest) (*AcceptAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAsset not implemented")
}
func (UnimplementedTransferAssetServer) mustEmbedUnimplementedTransferAssetServer() {}

// UnsafeTransferAssetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferAssetServer will
// result in compilation errors.
type UnsafeTransferAssetServer interface {
	mustEmbedUnimplementedTransferAssetServer()
}

func RegisterTransferAssetServer(s grpc.ServiceRegistrar, srv TransferAssetServer) {
	s.RegisterService(&TransferAsset_ServiceDesc, srv)
}

func _TransferAsset_RequestToAcceptAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestToAcceptAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferAssetServer).RequestToAcceptAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sig_graph_grpc.TransferAsset/RequestToAcceptAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferAssetServer).RequestToAcceptAsset(ctx, req.(*RequestToAcceptAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferAsset_AcceptAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferAssetServer).AcceptAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sig_graph_grpc.TransferAsset/AcceptAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferAssetServer).AcceptAsset(ctx, req.(*AcceptAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferAsset_ServiceDesc is the grpc.ServiceDesc for TransferAsset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferAsset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sig_graph_grpc.TransferAsset",
	HandlerType: (*TransferAssetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestToAcceptAsset",
			Handler:    _TransferAsset_RequestToAcceptAsset_Handler,
		},
		{
			MethodName: "AcceptAsset",
			Handler:    _TransferAsset_AcceptAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asset_transfer.proto",
}
